generator client {
    provider = "prisma-client-js"
}

// zod-prisma-types generator
// Generates zod schemas from the prisma models
// Zod validators can be added to fields using rich comments (use /// instead of //)
generator zod {
    provider         = "zod-prisma-types"
    output           = "../../shared/generated/zod" // the directory where generated zod schemas will be saved
    createInputTypes = false // default is true
    coerceDate       = true
    // useTypeAssertions             = true // circumvent type system to fix typescript error with zod versions >3.21.1
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

//
//
// ENUMS
//
//
// FOR USE IN USER, ORGANIZATION, EVENT
enum VerificationStatus {
    Pending
    Verified
}

// FOR USE IN PARTICIPATION
enum ParticipationStatus {
    Going
    Interested
    NotInterested
}

enum ProgramType {
    Bachelors
    Masters
}

enum FacultyName {
    Science
    Arts
    Schulich
}

//
//
// CORE MODELS
//
//
model Institution {
    id     String @id @default(uuid())
    name   String
    domain String

    user User[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("institution")
}

model User {
    id String @id @default(uuid())

    username  String @unique
    firstName String
    lastName  String

    email    String @unique
    password String

    otp        String?            @default("")
    jwt        String?            @default("")
    isVerified VerificationStatus @default(Pending)

    profilePic String? @unique

    institution   Institution @relation(fields: [institutionID], references: [id], onDelete: Cascade)
    institutionID String

    enrollments Enrollment[]

    posts    Post[]
    comments Comment[]

    events            Event[]
    UserEventResponse UserEventResponse[]

    subscriptions        TopicSubscription[]
    UserOrganizationRole UserOrganizationRole[]

    @@index([email])
    @@index([institutionID])
    @@map("user")
}

model Enrollment {
    id String @id @default(uuid())

    user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID String

    program   Program @relation(fields: [programID], references: [id], onDelete: Cascade)
    programID String

    @@index([userID])
    @@index([programID])
    @@map("enrollment")
}

model Program {
    id         String      @id @default(uuid())
    program    ProgramType
    department FacultyName

    Enrollment Enrollment[]

    @@map("program")
}

/// @zod.import(["import { zodStringToNumberOrNull, BooleanSchema } from '@shared/utils'"])
model Event {
    id             String              @id @default(uuid())
    userId         String              @map("user_id")
    /// @zod.custom.use(zodStringToNumberOrNull.pipe(z.number().int().positive().nullable()))
    organizationId String?                @map("organization_id")
    createdAt      DateTime            @unique @default(now()) @map("created_at")
    /// @zod.string({ required_error: "Title is required", invalid_type_error: "Title must be a string"}).min(3, { message: "Title must contain 3 or more characters" }).max(255)
    title          String              @db.VarChar(255)
    /// @zod.string.min(3).max(255)
    description    String?             @db.VarChar(255)
    /// @zod.string.min(3).max(255)
    location       String
    /// @zod.custom.use(z.coerce.date({required_error: "Please select a date and time", invalid_type_error: "Invalid datetime string",}).refine((value) => value > new Date(), { message: 'Start time must be in the future', }))
    startTime      DateTime            @map("start_time")
    /// @zod.date({required_error: "Please select a date and time", invalid_type_error: "Invalid datetime string",})
    endTime        DateTime            @map("end_time")
    /// @zod.custom.use(BooleanSchema)
    isPublic       Boolean             @map("is_public")
    status         ParticipationStatus
    image          String?
    user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    eventTags      EventTag[]
    eventResponses UserEventResponse[]

    @@index([userId])
    @@index([organizationId])
    @@map("event")
}

model UserEventResponse {
    userId              String @map("user_id")
    eventId             String    @map("event_id")
    participationStatus String @map("participation_status")
    user                User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    event               Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@id([userId, eventId])
    @@index([userId])
    @@index([eventId])
    @@map("user_event_response")
}

model Post {
    id             String           @id @default(uuid())
    userId         String        @map("user_id")
    image          String?
    organizationId String?          @map("organization_id")
    createdAt      DateTime      @unique @default(now()) @map("created_at")
    title          String
    text           String?
    public         Boolean       @default(true)
    user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    comments Comment[]
    postTags PostTag[]

    @@index([userId])
    @@index([organizationId])
    @@map("post")
}

model Comment {
    id        String      @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @map("user_id")
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String      @map("post_id")
    createdAt DateTime @unique @default(now()) @map("created_at")
    text      String

    @@index([userId])
    @@index([postId])
    @@map("comment")
}

enum OrganizationStatus {
    Pending
    Verified
}

model Organization {
    id                          String                          @id @default(uuid())
    organizationName            String                       @unique @map("organization_name")
    description                 String?
    createdAt                   DateTime                     @unique @default(now()) @map("created_at")
    status                      OrganizationStatus           @default(Pending)
    userOrganizationRoles       UserOrganizationRole[]
    userOrganizationPermissions OrganizationRolePermission[]
    events                      Event[]
    posts                       Post[]

    @@map("organization")
}

model UserOrganizationRole {
    userId         String       @map("user_id")
    organizationId String          @map("organization_id")
    roleId         String          @map("role_id")
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    role           Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([userId, organizationId, roleId])
    @@index([userId])
    @@index([organizationId])
    @@index([roleId])
    @@map("user_organization_role")
}

enum UserRole {
    Owner
    Admin
    Moderator
    Member
}

model Role {
    id                          String                          @id @default(uuid())
    roleName                    UserRole                     @map("role_name")
    userOrganizationRoles       UserOrganizationRole[]
    organizationRolePermissions OrganizationRolePermission[]

    @@map("role")
}

model OrganizationRolePermission {
    organizationId String          @map("organization_id")
    roleId         String          @map("role_id")
    permissionId   String          @map("permission_id")
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    role           Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
    permission     Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    @@id([organizationId, roleId, permissionId])
    @@index([organizationId])
    @@index([roleId])
    @@index([permissionId])
    @@map("organization_role_permission")
}

// many of these permissions may not apply to our application
enum AppPermissionName {
    CREATE_EVENTS
    MANAGE_EVENTS // edit and cancel event
    CREATE_POSTS
    MANAGE_POSTS // remove user posts
    MANAGE_MEMBERS // maybe ban/unban users?
    APPROVE_MEMBER_REQUESTS // not sure if we need this 
    VIEW_ANALYTICS // view details about the organization
    MANAGE_ORGANIZATION // edit org name, description, image, permissions
    DELETE_ORGANIZATION
}

model Permission {
    id                          String                          @id @default(uuid())
    permissionName              AppPermissionName            @map("permission_name")
    organizationRolePermissions OrganizationRolePermission[]

    @@map("permission")
}

model Topic {
    id            String                 @id @default(uuid())
    topicName     String              @unique @map("topic_name")
    eventTags     EventTag[]
    posts         PostTag[]
    subscriptions TopicSubscription[]

    @@map("topic")
}

model EventTag {
    eventId String   @map("event_id")
    topicId String   @map("topic_id")
    event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

    @@id([eventId, topicId])
    @@index([eventId])
    @@index([topicId])
    @@map("event_tag")
}

model PostTag {
    postId  String   @map("post_id")
    topicId String   @map("topic_id")
    post    Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
    topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

    @@id([postId, topicId])
    @@index([postId])
    @@index([topicId])
    @@map("post_tag")
}

model TopicSubscription {
    userId  String @map("user_id")
    topicId String    @map("topic_id")
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

    @@id([userId, topicId])
    @@index([userId])
    @@index([topicId])
    @@map("topic_subscription")
}
