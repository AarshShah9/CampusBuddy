// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model School {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
  users    User[]

  @@map("school")
}

model Student {
  id       Int     @id @default(autoincrement())
  school   School? @relation(fields: [schoolID], references: [id])
  schoolID Int
  email    String
  username String
  name     String

  @@index([schoolID])
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  firstName         String              @map("first_name")
  lastName          String              @map("last_name")
  email             String              @unique
  passwordHash      String              @map("password_hash")
  pictureUrl        String?             @map("picture_url")
  yearOfStudy       Int                 @map("year_of_study")
  schoolId          Int                 @map("school_id")
  school            School?             @relation(fields: [schoolId], references: [id])
  events            Event[]
  UserEventResponse UserEventResponse[]
  posts             Post[]
  comments          Comment[]
  groupRoles        UserGroupRole[]
  enrollments       Enrollment[]
  subscriptions     TopicSubscription[]

  @@index([schoolId])
  @@map("user")
}

model Event {
  id             Int                 @id @default(autoincrement())
  userId         Int                 @map("user_id")
  createdAt      DateTime            @default(now()) @map("created_at")
  title          String
  description    String?
  location       String
  startTime      DateTime            @map("start_time")
  endTime        DateTime            @map("end_time")
  mediaUrl       String?             @map("media_url")
  user           User?               @relation(fields: [userId], references: [id])
  eventTags      EventTag[]
  eventResponses UserEventResponse[]

  @@index([userId])
  @@map("event")
}

model UserEventResponse {
  userId              Int    @map("user_id")
  eventId             Int    @map("event_id")
  participationStatus String @map("participation_status")
  user                User?  @relation(fields: [userId], references: [id])
  event               Event? @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@map("user_event_response")
}

model Post {
  id        Int       @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  title     String
  text      String?
  mediaUrl  String?   @map("media_url")
  comments  Comment[]
  postTags  PostTag[]

  @@index([userId])
  @@map("post")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  text      String

  @@index([userId])
  @@index([postId])
  @@map("comment")
}

model Organization {
  id                   Int                   @id @default(autoincrement())
  organizationName     String                @unique @map("organization_name")
  description          String?
  createdAt            DateTime              @default(now()) @map("created_at")
  status               String
  userGroupRoles       UserGroupRole[]
  userGroupPermissions GroupRolePermission[]

  @@map("organization")
}

model UserGroupRole {
  userId       Int           @map("user_id")
  groupId      Int           @map("group_id")
  roleId       Int           @map("role_id")
  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [groupId], references: [id])
  role         Role?         @relation(fields: [roleId], references: [id])

  @@id([userId, groupId, roleId])
  @@index([userId])
  @@index([groupId])
  @@index([roleId])
  @@map("user_group_role")
}

model Role {
  id                   Int                   @id @default(autoincrement())
  roleName             String                @map("role_name")
  userGroupRoles       UserGroupRole[]
  groupRolePermissions GroupRolePermission[]

  @@map("role")
}

model GroupRolePermission {
  groupId      Int           @map("group_id")
  roleId       Int           @map("role_id")
  permissionId Int           @map("permission_id")
  organization Organization? @relation(fields: [groupId], references: [id])
  role         Role?         @relation(fields: [roleId], references: [id])
  permission   Permission?   @relation(fields: [permissionId], references: [id])

  @@id([groupId, roleId, permissionId])
  @@index([groupId])
  @@index([roleId])
  @@index([permissionId])
  @@map("group_role_permission")
}

model Permission {
  id                   Int                   @id @default(autoincrement())
  permissionName       String                @map("permission_name")
  groupRolePermissions GroupRolePermission[]

  @@map("permission")
}

model Enrollment {
  programId  Int      @map("program_id")
  userId     Int      @map("user_id")
  degreeType String   @map("degree_type")
  program    Program? @relation(fields: [programId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@id([programId, userId])
  @@index([programId])
  @@index([userId])
  @@map("enrollment")
}

model Program {
  id          Int          @id @default(autoincrement())
  programName String
  department  String
  enrollments Enrollment[]
}

model Topic {
  id            Int                 @id @default(autoincrement())
  topicName     String              @unique @map("topic_name")
  eventTags     EventTag[]
  posts         PostTag[]
  subscriptions TopicSubscription[]
}

model EventTag {
  eventId Int    @map("event_id")
  topicId Int    @map("topic_id")
  event   Event? @relation(fields: [eventId], references: [id])
  topic   Topic? @relation(fields: [topicId], references: [id])

  @@id([eventId, topicId])
  @@index([eventId])
  @@index([topicId])
  @@map("event_tag")
}

model PostTag {
  postId  Int    @map("post_id")
  topicId Int    @map("topic_id")
  post    Post?  @relation(fields: [postId], references: [id])
  topic   Topic? @relation(fields: [topicId], references: [id])

  @@id([postId, topicId])
  @@index([postId])
  @@index([topicId])
  @@map("post_tag")
}

model TopicSubscription {
  userId  Int   @map("user_id")
  topicId Int   @map("topic_id")
  user    User? @relation(fields: [userId], references: [id])
  topic   Topic @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
  @@index([userId])
  @@index([topicId])
  @@map("topic_subscription")
}
