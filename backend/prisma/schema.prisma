// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// zod-prisma-types generator
// Generates zod schemas from prisma models
generator zod {
  provider                      = "zod-prisma-types"
  output                        = "./generated/zod" // the directory where generated zod schemas will be saved
  createInputTypes              = false // default is true
  // useTypeAssertions             = true // circumvent type system to fix typescript error with zod versions >3.21.1
}

model School {
  id       Int       @id @default(autoincrement())
  name     String
  domain   String
  students Student[]
  users    User[]

  @@map("school")
}


model Student {
  id        Int     @id @default(autoincrement())
  school    School  @relation(fields: [schoolID], references: [id])
  schoolID  Int
  email     String
  username  String
  name      String
  password  String 
  otp       String
  jwt       String
  status    Boolean

  @@index([schoolID])
}

model User {
  id                Int                    @id @default(autoincrement())
  username          String                 @unique
  firstName         String                 @map("first_name")
  lastName          String                 @map("last_name")
  email             String                 @unique
  password          String                 @map("password")
  pictureUrl        String?                @map("picture_url")
  yearOfStudy       Int                    @map("year_of_study")
  schoolId          Int                    @map("school_id")
  isVerified        Boolean                @default(false) @map("is_verified")
  school            School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  events            Event[]
  UserEventResponse UserEventResponse[]
  posts             Post[]
  comments          Comment[]
  organizationRoles UserOrganizationRole[]
  enrollments       Enrollment[]
  subscriptions     TopicSubscription[]

  otp               String
  jwt               String
  status            Boolean

  @@index([schoolId])
  @@map("user")
}

/// @zod.refine((data) => data.endDate > data.startDate, { message: 'End date cannot be earlier than start date.', path: ['endDate'], })
model Event {
  id             Int                 @id @default(autoincrement())
  userId         Int                 @map("user_id")
  /// @zod.number.int()
  organizationId Int?                @map("organization_id")
  createdAt      DateTime            @default(now()) @map("created_at")
  // @zod.string.min(3).max(255)
  title          String              @db.VarChar(255)
  /// @zod.string.max(255)
  description    String?             @db.VarChar(255)
  location       String
  /// @zod.custom.use(z.coerce.date().refine((value) => value > new Date(), { message: 'Start date must be in the future', }))
  startDate      DateTime            @map("start_date")
  endDate        DateTime            @map("end_date")
  mediaUrl       String?             @map("media_url")
  isPublic       Boolean             @map("is_public")
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  eventTags      EventTag[]
  eventResponses UserEventResponse[]

  @@index([userId])
  @@index([organizationId])
  @@map("event")
}

enum ParticipationStatus {
  Going
  Interested
  NotInterested
}

model UserEventResponse {
  userId              Int    @map("user_id")
  eventId             Int    @map("event_id")
  participationStatus String @map("participation_status")
  user                User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event               Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@map("user_event_response")
}

model Post {
  id             Int            @id @default(autoincrement())
  userId         Int            @map("user_id")
  organizationId Int?           @map("organization_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  title          String
  text           String?
  mediaUrl       String?        @map("media_url")
  public         Boolean        @default(true)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  comments  Comment[]
  postTags  PostTag[]
  @@index([userId])
  @@index([organizationId])
  @@map("post")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  text      String
  @@index([userId])
  @@index([postId])
  @@map("comment")
}

enum OrganizationStatus {
  Pending
  Verified
}

model Organization {
  id                          Int                          @id @default(autoincrement())
  organizationName            String                       @unique @map("organization_name")
  description                 String?
  createdAt                   DateTime                     @default(now()) @map("created_at")
  status                      OrganizationStatus           @default(Pending)
  userOrganizationRoles       UserOrganizationRole[]
  userOrganizationPermissions OrganizationRolePermission[]
  events                      Event[]
  posts                       Post[]

  @@map("organization")
}

model UserOrganizationRole {
  userId         Int           @map("user_id")
  organizationId Int           @map("organization_id")
  roleId         Int           @map("role_id")
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId, roleId])
  @@index([userId])
  @@index([organizationId])
  @@index([roleId])
  @@map("user_organization_role")
}

enum UserRole {
  Owner
  Admin
  Moderator
  Member
}

model Role {
  id                          Int                          @id @default(autoincrement())
  roleName                    UserRole                     @map("role_name")
  userOrganizationRoles       UserOrganizationRole[]
  organizationRolePermissions OrganizationRolePermission[]

  @@map("role")
}


model OrganizationRolePermission {
  organizationId Int           @map("organization_id")
  roleId         Int           @map("role_id")
  permissionId   Int           @map("permission_id")
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission     Permission    @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([organizationId, roleId, permissionId])
  @@index([organizationId])
  @@index([roleId])
  @@index([permissionId])
  @@map("organization_role_permission")
}

model Permission {
  id                          Int                          @id @default(autoincrement())
  permissionName              String                       @map("permission_name")
  organizationRolePermissions OrganizationRolePermission[]

  @@map("permission")
}

model Enrollment {
  programId  Int      @map("program_id")
  userId     Int      @map("user_id")
  degreeType String   @map("degree_type")
  program    Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([programId, userId])
  @@index([programId])
  @@index([userId])
  @@map("enrollment")
}

model Program {
  id          Int          @id @default(autoincrement())
  programName String
  department  String
  enrollments Enrollment[]

  @@map("program")
}

model Topic {
  id            Int                 @id @default(autoincrement())
  topicName     String              @unique @map("topic_name")
  eventTags     EventTag[]
  posts         PostTag[]
  subscriptions TopicSubscription[]

  @@map("topic")
}

model EventTag {
  eventId Int    @map("event_id")
  topicId Int    @map("topic_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([eventId, topicId])
  @@index([eventId])
  @@index([topicId])
  @@map("event_tag")
}

model PostTag {
  postId  Int    @map("post_id")
  topicId Int    @map("topic_id")
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([postId, topicId])
  @@index([postId])
  @@index([topicId])
  @@map("post_tag")
}

model TopicSubscription {
  userId  Int   @map("user_id")
  topicId Int   @map("topic_id")
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
  @@index([userId])
  @@index([topicId])
  @@map("topic_subscription")
}