// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ENUMS
enum EventStatus {
  Verified
  NonVerified
}

enum UserRole {
  Owner
  Admin
  Moderator
  Member
}

enum UserType {
  Student // has email with proper domain, enrollment record(s)
  PendingOrg // an org account that hasn't been approved yet by admins or existing org
  ApprovedOrg
  Admin // System level admin
}

enum OrganizationStatus {
  Pending
  Approved
  Rejected
}

enum UserOrgStatus {
  Pending
  Approved
  Rejected // may not be necessary if we just delete the record instead
  Banned
}

enum ParticipationStatus {
  Interested
  Going
}

// many of these permissions may not apply to our application
enum AppPermissionName {
  CREATE_EVENTS
  MANAGE_EVENTS // edit and cancel event
  CREATE_POSTS
  MANAGE_POSTS // remove user posts
  MANAGE_MEMBERS // maybe ban/unban users?
  APPROVE_MEMBER_REQUESTS // not sure if we need this
  VIEW_ANALYTICS // view details about the organization
  MANAGE_ORGANIZATION // edit org name, description, image, permissions
  DELETE_ORGANIZATION
}

// CORE MODELS
model Institution {
  id              String         @id @default(uuid())
  name            String         @unique
  domain          String         @unique
  user            User[]
  organizations   Organization[]
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  location        Location       @relation(fields: [locationPlaceId], references: [placeId])
  locationPlaceId String
  posts           Post[]
  item            Item[]

  @@index([locationPlaceId])
  @@map("institution")
}

model User {
  id                   String                 @id @unique @default(uuid())
  firstName            String                 @map("first_name")
  lastName             String                 @map("last_name")
  email                String                 @unique
  password             String                 @map("password")
  profilePic           String?                @unique @map("profile_pic")
  institutionId        String?                @map("institution_id")
  accountType          UserType               @map("account_type")
  institution          Institution?           @relation(fields: [institutionId], references: [id], onDelete: SetNull)
  enrollments          Enrollment[]
  posts                Post[]
  item                 Item[]
  comments             Comment[]
  events               Event[]
  UserEventResponse    UserEventResponse[]
  subscriptions        TopicSubscription[]
  UserOrganizationRole UserOrganizationRole[]
  pushTokens           PushToken[]

  degreeName String? @map("degree_name")

  @@index([email])
  @@index([institutionId])
  @@map("user")
}

model Enrollment {
  programId   String  @map("program_id")
  userId      String  @map("user_id")
  degreeType  String  @map("degree_type")
  yearOfStudy Int     @map("year_of_study")
  program     Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([programId, userId])
  @@index([programId])
  @@index([userId])
  @@map("enrollment")
}

model Program {
  id          String       @id @default(uuid())
  programName String
  department  String
  enrollments Enrollment[]

  @@map("program")
}

model Event {
  id              String              @id @default(uuid())
  userId          String              @map("user_id")
  organizationId  String?             @map("organization_id")
  createdAt       DateTime            @unique @default(now()) @map("created_at")
  title           String              @db.VarChar(255)
  description     String?             @db.VarChar(255)
  location        Location            @relation(fields: [locationPlaceId], references: [placeId])
  startTime       DateTime            @map("start_time")
  endTime         DateTime            @map("end_time")
  isPublic        Boolean             @default(true) @map("is_public")
  isFlagged       Boolean             @default(false)
  status          EventStatus
  image           String?
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  eventTags       EventTag[]
  eventResponses  UserEventResponse[]
  locationPlaceId String

  @@index([userId])
  @@index([organizationId])
  @@index([locationPlaceId])
  @@map("event")
}

model UserEventResponse {
  userId              String              @map("user_id")
  eventId             String              @map("event_id")
  participationStatus ParticipationStatus @map("participation_status")
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  event               Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId, participationStatus])
  @@index([userId])
  @@index([eventId])
  @@map("user_event_response")
}

model Post {
  id                String        @id @default(uuid())
  userId            String        @map("user_id")
  organizationId    String?       @map("organization_id")
  image             String?
  createdAt         DateTime      @unique @default(now()) @map("created_at")
  title             String
  description       String?
  isPublic          Boolean       @default(true)
  isFlagged         Boolean       @default(false)
  expiresAt         DateTime?     @map("expires_at")
  numberOfSpots     Int?          @map("number_of_spots")
  numberOfSpotsLeft Int?          @map("number_of_spots_left")
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization      Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  type              PostType
  comments          Comment[]
  postTags          PostTag[]
  institutionId     String        @map("institution_id")
  Institution       Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([institutionId])
  @@map("post")
}

enum PostType {
  LookingFor
  Thread
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @unique @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([postId])
  @@map("comment")
}

model Organization {
  id                          String                       @id @default(uuid())
  organizationName            String                       @unique @map("organization_name")
  description                 String?
  createdAt                   DateTime                     @unique @default(now()) @map("created_at")
  updatedAt                   DateTime                     @updatedAt @map("updated_at")
  status                      OrganizationStatus           @default(Pending)
  image                       String?
  institutionId               String                       @map("institution_id")
  institution                 Institution                  @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  userOrganizationRoles       UserOrganizationRole[]
  userOrganizationPermissions OrganizationRolePermission[]
  events                      Event[]
  posts                       Post[]

  @@index([institutionId])
  @@map("organization")
}

model UserOrganizationRole {
  userId         String        @map("user_id")
  organizationId String        @map("organization_id")
  roleId         String        @map("role_id")
  status         UserOrgStatus
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId, roleId])
  @@index([userId])
  @@index([organizationId])
  @@index([roleId])
  @@map("user_organization_role")
}

model Role {
  id                          String                       @id @default(uuid())
  roleName                    UserRole                     @unique @map("role_name")
  userOrganizationRoles       UserOrganizationRole[]
  organizationRolePermissions OrganizationRolePermission[]

  @@map("role")
}

model OrganizationRolePermission {
  organizationId String       @map("organization_id")
  roleId         String       @map("role_id")
  permissionId   String       @map("permission_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission     Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([organizationId, roleId, permissionId])
  @@index([organizationId])
  @@index([roleId])
  @@index([permissionId])
  @@map("organization_role_permission")
}

model Permission {
  id                          String                       @id @default(uuid())
  permissionName              AppPermissionName            @map("permission_name")
  organizationRolePermissions OrganizationRolePermission[]

  @@map("permission")
}

model Topic {
  id            String              @id @default(uuid())
  topicName     String              @unique @map("topic_name")
  eventTags     EventTag[]
  posts         PostTag[]
  subscriptions TopicSubscription[]

  @@map("topic")
}

model EventTag {
  eventId String @map("event_id")
  topicId String @map("topic_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([eventId, topicId])
  @@index([eventId])
  @@index([topicId])
  @@map("event_tag")
}

model PostTag {
  postId  String @map("post_id")
  topicId String @map("topic_id")
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([postId, topicId])
  @@index([postId])
  @@index([topicId])
  @@map("post_tag")
}

model TopicSubscription {
  userId  String @map("user_id")
  topicId String @map("topic_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
  @@index([userId])
  @@index([topicId])
  @@map("topic_subscription")
}

model Location {
  placeId   String @id
  latitude  Float
  longitude Float
  name      String

  Institution Institution[]
  Event       Event[]
  Item        Item[]

  @@map("location")
}

model Item {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  institutionId String       @map("institution_id")
  institution   Institution? @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  isPublic      Boolean      @default(true)
  isFlagged     Boolean      @default(false)
  title         String
  description   String?
  price         Int
  createdAt     DateTime     @unique @default(now()) @map("created_at")
  condition     String?      @map("condition")
  Image         Image[]

  location        Location @relation(fields: [locationPlaceId], references: [placeId])
  locationPlaceId String

  state State

  @@index([userId])
  @@index([institutionId])
  @@index([locationPlaceId])
  @@map("item")
}

model Image {
  id     String @id @default(uuid())
  itemId String @map("item_id")
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  url    String

  @@index([itemId])
  @@map("image")
}

model PushToken {
  userId    String @map("user_id")
  pushToken String @map("push_token")
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, pushToken])
  @@unique([userId, pushToken])
  @@index([userId])
  @@map("push_token")
}

enum State {
  Available
  Sold
  Removed
}
