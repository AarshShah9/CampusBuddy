import { z } from "zod";
import * as generatedSchemas from "./generated/zod/index";

/**
 * These are manually created Zod schemas
 * Most schemas are based off of schemas generated by zod-prisma-types for consistency with thes prisma schemas and the database.
 * The Prisma schemas are considered the source of truth
 */

///////////////////////////////
// EVENT SCHEMAS
///////////////////////////////

/**
 * Create Verified Event Schema
 * omit not available on EventCustomValidatorsSchema -> z.ZodEffects
 * so we apply refine constraint to enforce endTime later than startTime here
 */
export const EventCreateSchema = generatedSchemas.EventSchema.omit({
  id: true, // Default value autoincrement
  userId: true, // get from authtoken
  createdAt: true, // default value is current date, handled by the db
  imageId: true, // Update value after image is created
  organizationId: true, // get from req.params if creating verified event
}).refine((data) => data.endTime > data.startTime, {
  message: "End time must be later than start time.",
  path: ["endTime"],
});

export type EventCreateInput = z.infer<typeof EventCreateSchema>;

/**
 * Update Event Schema
 * partial makes all fields optional, useful for update (patch request)
 */
export const EventUpdateSchema = generatedSchemas.EventSchema.partial();

export type EventUpdateInput = z.infer<typeof EventUpdateSchema>;

/////////////////////////////// s
// ORGANIZATION SCHEMAS
///////////////////////////////

// Create a new schema based on OrganizationSchema, omitting id and createdAt
export const OrganizationCreateSchema =
  generatedSchemas.OrganizationSchema.omit({
    id: true,
    createdAt: true,
  });

export type OrganizationCreateInput = z.infer<typeof OrganizationCreateSchema>;

/////////////////////////////// s
// PAGINATION SCHEMAS
///////////////////////////////

const PAGINATION_DEFAULT_PAGE_SIZE = 10;

export const CursorPaginationSchema = z.object({
  cursor: z.string().optional(),
  pageSize: z.coerce.number().default(PAGINATION_DEFAULT_PAGE_SIZE),
});

export type CursorPaginationParams = z.infer<typeof CursorPaginationSchema>;

export const CursorPaginationDatetimeSchema = CursorPaginationSchema.extend({
  cursor: z.string().datetime().optional(), // overwrites cursor to add .datetime() constraint
});

export type CursorPaginationDatetimeParams = z.infer<
  typeof CursorPaginationDatetimeSchema
>;

/////////////////////////////// s
// UTILITY SCHEMAS
///////////////////////////////

// Schema for validating an ID integer parameter
export const IdParamSchema = z.object({
  id: z.coerce
    .number({
      invalid_type_error: "Invalid Id format. Must be a non-negative integer.",
    })
    .int()
    .positive()
    .safe(),
});

// TODO: remove later
// Example schema to test using zod schema in frontend with react-hook-form and the zod resolver
export const signUpSchema = z
  .object({
    email: z.string().email(),
    password: z.string().min(10, "Password must be at least 10 characters"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords must match",
    path: ["confirmPassword"],
  });

export type TSignUpSchema = z.infer<typeof signUpSchema>;
